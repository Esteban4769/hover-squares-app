{"version":3,"sources":["components/FieldCell/FieldCell.tsx","components/HoverCard/HoverCard.tsx","App.tsx","api/fields.ts","index.tsx"],"names":["FieldCell","cellIndex","onHover","isHovered","className","cn","onMouseEnter","HoverCard","position","row","Math","floor","column","App","useState","fieldsModes","setFieldModes","selectedFieldMode","setSelectedFieldMode","isStarted","setIsStarted","hoveredPositions","setHoveredPositions","loadFieldMods","a","fetch","then","response","json","catch","Error","fieldModsFromServer","useEffect","onCellHover","newPositions","includes","filter","pos","push","FormControl","sx","minWidth","InputLabel","id","Select","labelId","label","value","name","onChange","event","target","fieldMode","find","mode","console","log","length","map","MenuItem","Button","variant","onClick","Array","field","fill","_","i","uuidv4","hoverPosition","ReactDOM","render","document","getElementById"],"mappings":"yWASaA,EAA8B,SAAC,GAAuC,IAArCC,EAAoC,EAApCA,UAAWC,EAAyB,EAAzBA,QAASC,EAAgB,EAAhBA,UAChE,OACE,qBACEC,UAAWC,IACT,aACA,CAAE,sBAAuBF,IAE3BG,aAAc,WACZJ,EAAQD,OCXHM,EAA6B,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAErCC,EAAMC,KAAKC,MAAMH,EADJ,GAC6B,EAC1CI,EAAUJ,EAFG,EAEsB,EAEzC,OACE,qBAAKJ,UAAU,mBAAf,uBACWK,EADX,gBACsBG,MCKbC,EAAgB,WAC3B,MAAqCC,mBAAsB,IAA3D,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAAkDF,mBAA2B,MAA7E,mBAAOG,EAAP,KAA0BC,EAA1B,KACA,EAAkCJ,oBAAS,GAA3C,mBAAOK,EAAP,KAAkBC,EAAlB,KACA,EAAgDN,mBAAmB,IAAnE,mBAAOO,EAAP,KAAyBC,EAAzB,KAEMC,EAAa,uCAAG,4BAAAC,EAAA,sECrBfC,MAHG,qDAIPC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BC,OAAM,WACL,MAAM,IAAIC,MAAM,uBDkBE,OACdC,EADc,OAGpBf,EAAce,GAHM,2CAAH,qDAMnBC,qBAAU,WACRT,MACC,IAEH,IAkBMU,EAAc,SAAChC,GACnB,IAAIiC,EAAY,YAAOb,GAEnBa,EAAaC,SAASlC,GACxBiC,EAAeA,EAAaE,QAAO,SAAAC,GAAG,OAAIA,IAAQpC,KAElDiC,EAAaI,KAAKrC,GAGpBqB,EAAoB,YAAIY,KAG1B,OACE,sBAAK9B,UAAU,oBAAf,UACE,sBAAKA,UAAU,QAAf,UACE,sBAAKA,UAAU,sBAAf,UACE,eAACmC,EAAA,EAAD,CAAaC,GAAI,CAAEC,SAAU,SAA7B,UACE,cAACC,EAAA,EAAD,CAAYC,GAAG,eAAf,uBAIA,cAACC,EAAA,EAAD,CACEC,QAAQ,eACRC,MAAM,YACNC,MAAO9B,EAAoBA,EAAkB+B,KAAO,GACpDC,SA3CiB,SAACC,GAC5B,IAAQH,EAAUG,EAAMC,OAAhBJ,MACFK,EAAYrC,EAAYsC,MAAK,SAAAC,GAAI,OAAKA,EAAKN,OAASD,KAErDK,IAILlC,EAAqBkC,GACrBG,QAAQC,IAAR,OAAYvC,QAAZ,IAAYA,OAAZ,EAAYA,EAAmB+B,MAC/B5B,GAAa,GACbE,EAAoB,MA4BZ,SAMGP,EAAY0C,OAAS,GACjB1C,EAAY2C,KAAI,SAAAN,GACjB,IAAQT,EAAaS,EAAbT,GAAIK,EAASI,EAATJ,KAEZ,OACE,cAACW,EAAA,EAAD,CAAmBZ,MAAOC,EAA1B,SACGA,GADYL,WASzB,cAACiB,EAAA,EAAD,CACEC,QAAQ,YACRC,QA/CM,WACd1C,GAAa,IA4CP,sBAQF,qBAAKhB,UAAU,eAAf,SACIa,GAAqBE,GACnB,IAAI4C,MAAJ,OAAU9C,QAAV,IAAUA,OAAV,EAAUA,EAAmB+C,OAAOC,KAAK,MAAMP,KAAI,SAACQ,EAAGC,GACzD,IAAMhE,EAAYkB,EAAiBc,SAASgC,GAE5C,OACE,cAAC,EAAD,CAEElE,UAAWkE,EACXjE,QAAS+B,EACT9B,UAAWA,GAHNiE,uBAUf,sBAAKhE,UAAU,aAAf,UACE,oBAAIA,UAAU,oBAAd,2BAIA,qBAAKA,UAAU,oBAAf,SACGiB,EAAiBoC,OAAS,GACzBpC,EAAiBqC,KAAI,SAACW,GAAD,OACnB,cAAC,EAAD,CAEE7D,SAAU6D,GADLD,2BE1HrBE,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.b63d53dc.chunk.js","sourcesContent":["import React from 'react';\nimport cn from 'classnames';\n\ninterface Props {\n  cellIndex: number,\n  isHovered: boolean,\n  onHover: (index: number) => void,\n}\n\nexport const FieldCell : React.FC<Props> = ({ cellIndex, onHover, isHovered }) => {\n  return (\n    <div\n      className={cn(\n        'field-cell',\n        { 'field-cell--hovered': isHovered },\n      )}\n      onMouseEnter={() => {\n        onHover(cellIndex);\n      }}\n    >\n    </div>\n  );\n};\n","import React from 'react';\n\ninterface Props {\n  position: number,\n}\n\nexport const HoverCard: React.FC<Props> = ({ position }) => {\n  const numColumns = 5;\n  const row = Math.floor(position / numColumns) + 1;\n  const column = (position % numColumns) + 1;\n\n  return (\n    <div className=\"hover-info__card\">\n      { `row ${row} col ${column}`}\n    </div>\n  );\n};\n","/* eslint-disable no-console */\n/* eslint-disable react/no-array-index-key */\nimport React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport {\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  SelectChangeEvent,\n  Button,\n} from '@mui/material';\nimport { v4 as uuidv4 } from 'uuid';\nimport { getFieldModes } from './api/fields';\nimport { FieldMode } from './types/FieldMode';\nimport { FieldCell } from './components/FieldCell';\nimport { HoverCard } from './components/HoverCard';\n\nexport const App: React.FC = () => {\n  const [fieldsModes, setFieldModes] = useState<FieldMode[]>([]);\n  const [selectedFieldMode, setSelectedFieldMode] = useState<FieldMode | null>(null);\n  const [isStarted, setIsStarted] = useState(false);\n  const [hoveredPositions, setHoveredPositions] = useState<number[]>([]);\n\n  const loadFieldMods = async () => {\n    const fieldModsFromServer = await getFieldModes<FieldMode[]>();\n\n    setFieldModes(fieldModsFromServer);\n  };\n\n  useEffect(() => {\n    loadFieldMods();\n  }, []);\n\n  const onSelectedModeChange = (event: SelectChangeEvent) => {\n    const { value } = event.target;\n    const fieldMode = fieldsModes.find(mode => (mode.name === value));\n\n    if (!fieldMode) {\n      return;\n    }\n\n    setSelectedFieldMode(fieldMode);\n    console.log(selectedFieldMode?.name);\n    setIsStarted(false);\n    setHoveredPositions([]);\n  };\n\n  const onStart = () => {\n    setIsStarted(true);\n  };\n\n  const onCellHover = (cellIndex: number) => {\n    let newPositions = [...hoveredPositions];\n\n    if (newPositions.includes(cellIndex)) {\n      newPositions = newPositions.filter(pos => pos !== cellIndex);\n    } else {\n      newPositions.push(cellIndex);\n    }\n\n    setHoveredPositions([...newPositions]);\n  };\n\n  return (\n    <div className=\"hover-squares-app\">\n      <div className=\"field\">\n        <div className=\"field__control-form\">\n          <FormControl sx={{ minWidth: '240px' }}>\n            <InputLabel id=\"select-label\">\n              Pick mode\n            </InputLabel>\n\n            <Select\n              labelId=\"select-label\"\n              label=\"Pick mode\"\n              value={selectedFieldMode ? selectedFieldMode.name : ''}\n              onChange={onSelectedModeChange}\n            >\n              {fieldsModes.length > 0\n                && fieldsModes.map(fieldMode => {\n                  const { id, name } = fieldMode;\n\n                  return (\n                    <MenuItem key={id} value={name}>\n                      {name}\n                    </MenuItem>\n                  );\n                })}\n\n            </Select>\n          </FormControl>\n\n          <Button\n            variant=\"contained\"\n            onClick={onStart}\n          >\n            Start\n          </Button>\n        </div>\n\n        <div className=\"field__board\">\n          {(selectedFieldMode && isStarted)\n          && (new Array(selectedFieldMode?.field).fill(null).map((_, i) => {\n            const isHovered = hoveredPositions.includes(i);\n\n            return (\n              <FieldCell\n                key={uuidv4()}\n                cellIndex={i}\n                onHover={onCellHover}\n                isHovered={isHovered}\n              />\n            );\n          }))}\n        </div>\n      </div>\n\n      <div className=\"hover-info\">\n        <h2 className=\"hover-info__title\">\n          Hover squares\n        </h2>\n\n        <div className=\"hover-info__cards\">\n          {hoveredPositions.length > 0 && (\n            hoveredPositions.map((hoverPosition) => (\n              <HoverCard\n                key={uuidv4()}\n                position={hoverPosition}\n              />\n            ))\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n","const URL = 'https://60816d9073292b0017cdd833.mockapi.io/modes';\n\nexport const getFieldModes = <T>():Promise<T> => {\n  return fetch(URL)\n    .then(response => response.json())\n    .catch(() => {\n      throw new Error('Cant fetch data!');\n    });\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}